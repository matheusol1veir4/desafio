package br.com.desafio.avaliacao.headless.internal.resource.v1_0;


import br.com.desafio.avaliacao.headless.dto.v1_0.Avaliacao;
import br.com.desafio.avaliacao.headless.dto.v1_0.AvaliacaoCompleta;
import br.com.desafio.avaliacao.headless.dto.v1_0.AvaliacaoDetalhe;
import br.com.desafio.avaliacao.headless.internal.converter.ConverterDto;
import br.com.desafio.avaliacao.headless.resource.v1_0.AvaliacaoResource;
import br.com.example.model.avaliacao.permission.AvaliacaoPermissionChecker;
import br.com.example.model.avaliacao.permission.PermissionConstants;
import br.com.example.model.avaliacao.service.AvaliacaoDetalheLocalService;
import br.com.example.model.avaliacao.service.AvaliacaoLocalService;
import br.com.example.model.avaliacao.service.search.AvaliacaoSearchHelper;
import br.com.example.model.avaliacao.service.search.AvaliacaoSearchService;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Role;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalService;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.vulcan.pagination.Page;

import com.liferay.portal.vulcan.pagination.Pagination;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ServiceScope;

import javax.ws.rs.core.Response;
import java.util.*;
import java.util.stream.Collectors;


/**
 * Resource implementation para gerenciamento de avalia√ß√µes via REST API.
 *
 * @author sea
 */
@Component(
		properties = "OSGI-INF/liferay/rest/v1_0/avaliacao.properties",
		scope = ServiceScope.PROTOTYPE,
		service = AvaliacaoResource.class
)
public class AvaliacaoResourceImpl extends BaseAvaliacaoResourceImpl {



	/**
	 * Busca uma avalia√ß√£o espec√≠fica por ID.
	 *
	 * @param avaliacaoId ID da avalia√ß√£o
	 * @return DTO da avalia√ß√£o encontrada
	 * @throws PortalException se a avalia√ß√£o n√£o for encontrada
	 */
	@Override
	public Avaliacao getAvaliacaoById(Long avaliacaoId) throws PortalException {

		// Busca avalia√ß√£o no banco via LocalService
		br.com.example.model.avaliacao.model.Avaliacao entity =
				_avaliacaoLocalService.getAvaliacao(avaliacaoId);

		return ConverterDto.entityToDto(entity); // Converte entity para DTO
	}


	/**
	 * Busca todas as avalia√ß√µes de um funcion√°rio espec√≠fico.
	 *
	 * @param funcionarioId ID do funcion√°rio
	 * @return p√°gina contendo lista de avalia√ß√µes do funcion√°rio
	 * @throws PortalException se houver erro ao acessar o banco de dados
	 */
	@Override
	public Page<Avaliacao> getAvaliacoesByFuncionario(Long funcionarioId)
			throws PortalException {

		// Busca entidades no banco via LocalService
		List<br.com.example.model.avaliacao.model.Avaliacao> entities =
				_avaliacaoLocalService.findByFuncionarioId(funcionarioId);

		// Retorna p√°gina vazia se n√£o houver dados
		if (entities == null || entities.isEmpty()) {
			return Page.of(new ArrayList<>());
		}

		List<Avaliacao> dtos = ConverterDto.entityListToDtoList(entities);

		return Page.of(dtos); // Retorna p√°gina com DTOs
	}

	/**
	 * Busca a avalia√ß√£o espec√≠fica de um funcion√°rio em determinado per√≠odo.
	 *
	 * @param funcionarioId ID do funcion√°rio
	 * @param periodoDesafio per√≠odo do desafio (1=30, 2=60, 3=90 dias)
	 * @return DTO da avalia√ß√£o encontrada
	 * @throws PortalException se a avalia√ß√£o n√£o for encontrada
	 */
	@Override
	public Avaliacao getAvaliacaoByFuncionarioAndPeriodo(Long funcionarioId, Integer periodoDesafio)
			throws PortalException {

		// Busca avalia√ß√£o no banco via LocalService
		br.com.example.model.avaliacao.model.Avaliacao entity =
				_avaliacaoLocalService.findByFuncionarioIdAndPeriodoDesafio(funcionarioId, periodoDesafio);

		if (entity == null) {
			throw new PortalException("Avalia√ß√£o n√£o encontrada para funcion√°rio " + funcionarioId +
					" no per√≠odo " + periodoDesafio);
		}

		return convertEntityToDTO(entity); // Converte entity para DTO
	}

	/**
	 * Busca avalia√ß√£o completa com todos os detalhes de avaliadores.
	 *
	 * @param avaliacaoId ID da avalia√ß√£o
	 * @return AvaliacaoCompleta DTO com avalia√ß√£o + array de detalhes
	 * @throws PortalException se a avalia√ß√£o n√£o existir
	 */
	@Override
	public AvaliacaoCompleta getAvaliacaoCompletaById(Long avaliacaoId) throws PortalException {

		// 1. Busca a avalia√ß√£o principal
		br.com.example.model.avaliacao.model.Avaliacao avaliacaoEntity =
				_avaliacaoLocalService.getAvaliacao(avaliacaoId);

		// 2. Busca TODOS os detalhes relacionados
		List<br.com.example.model.avaliacao.model.AvaliacaoDetalhe> detalhesEntities =
				_avaliacaoDetalheLocalService.findByAvaliacaoId(avaliacaoId);

		// 3. NOVO: Usa ConverterDto para montar DTO composto
		return ConverterDto.toAvaliacaoCompleta(avaliacaoEntity, detalhesEntities);
	}

	/**
	 * Busca funcion√°rios ativos do Liferay pelo nome.
	 *
	 * GET /o/avaliacao-headless/v1.0/funcionarios
	 */
	@Override
	public Page getFuncionarios(
			String nome,
			Pagination pagination
	) throws Exception {

		long companyId = PortalUtil.getCompanyId(contextHttpServletRequest);

		try {
			// 1. Busca TODOS os usu√°rios ativos da empresa
			List<com.liferay.portal.kernel.model.User> allUsers =
					_userLocalService.getCompanyUsers(companyId, 0, Integer.MAX_VALUE);

			// 2. Filtra apenas usu√°rios ATIVOS
			List<com.liferay.portal.kernel.model.User> activeUsers = allUsers.stream()
					.filter(user -> user.isActive())
					.collect(Collectors.toList());

			// 3. Se foi passado filtro de nome
			if (Validator.isNotNull(nome) && !nome.trim().isEmpty()) {
				String nomeLower = nome.toLowerCase();
				activeUsers = activeUsers.stream()
						.filter(user -> user.getFullName().toLowerCase().contains(nomeLower))
						.collect(Collectors.toList());
			}

			// 4. Ordenar por nome
			activeUsers.sort((u1, u2) -> u1.getFullName().compareTo(u2.getFullName()));

			// 5. Aplicar pagina√ß√£o
			int totalCount = activeUsers.size();
			int start = pagination != null ? pagination.getStartPosition() : 0;
			int end = pagination != null ?
					Math.min(pagination.getEndPosition(), totalCount) : totalCount;

			List<com.liferay.portal.kernel.model.User> paginatedUsers =
					activeUsers.subList(start, end);

			// 6. Converter para Map/JSON - MAS agora retorna a lista completa
			List<Map<String, Object>> funcionarioDtos = paginatedUsers.stream()
					.map(user -> {
						Map<String, Object> dto = new HashMap<>();
						dto.put("funcionarioId", user.getUserId());
						dto.put("nome", user.getFullName());
						dto.put("email", user.getEmailAddress());
						dto.put("screenName", user.getScreenName());
						return dto;
					})
					.collect(Collectors.toList());

			// 7. CORRIGIDO: Retorna a LISTA de Maps, n√£o um Map √∫nico
			// A estrutura JSON ser√° montada automaticamente pelo Liferay
			return Page.of(funcionarioDtos, pagination, totalCount);

		} catch (Exception e) {
			_log.error("Erro ao buscar funcion√°rios: " + e.getMessage(), e);
			throw new Exception("Erro ao buscar funcion√°rios: " + e.getMessage(), e);
		}
	}

	/**
	 * Retorna avalia√ß√µes pendentes para o usu√°rio logado baseado no seu papel.
	 *
	 * Endpoint: GET /o/avaliacao-headless/v1.0/avaliacoes/pendentes-para-mim
	 *
	 * Busca avalia√ß√µes onde o usu√°rio tem um detalhe pendente (desempenho = 0).
	 *
	 * @return Page com lista de AvaliacaoCompleta onde o usu√°rio tem detalhe pendente
	 * @throws PortalException se usu√°rio n√£o autenticado ou sem papel de avaliador
	 */
	@Override
	public Page<AvaliacaoCompleta> getAvaliacoesPendentesParaMim() throws PortalException {
		// ==========================================
		// 1. OBTER USU√ÅRIO LOGADO
		// ==========================================
		User currentUser = getLoginUser();
		if (currentUser == null) {
			_log.error("‚ùå ERRO: Usu√°rio n√£o autenticado!");
			throw new PortalException("Usu√°rio n√£o autenticado");
		}

		_log.info("========== IN√çCIO: getAvaliacoesPendentesParaMim ==========");
		_log.info("‚úÖ USU√ÅRIO LOGADO: " + currentUser.getFullName() + " (ID: " + currentUser.getUserId() + ")");
		_log.info("‚úÖ E-MAIL: " + currentUser.getEmailAddress());

		// ==========================================
		// 2. DESCOBRIR TIPO DO AVALIADOR
		// ==========================================
		int tipoAvaliador = obterTipoAvaliadorDoUsuario(currentUser);

		_log.info("üìã TIPO DE AVALIADOR: " + tipoAvaliador);
		_log.info("   1 = Tech Lead | 2 = Gerente | 3 = RH");

		if (tipoAvaliador == 0) {
			_log.error("‚ùå ERRO: Usu√°rio n√£o possui papel de avaliador!");
			throw new PortalException("Usu√°rio n√£o possui papel de avaliador (Tech Lead, Gerente ou RH)");
		}

		// ==========================================
		// 3. BUSCAR DETALHES PENDENTES
		// ==========================================
		_log.info("üîç BUSCANDO DETALHES PENDENTES...");
		_log.info("   Filtro: tipoAvaliador = " + tipoAvaliador + " AND desempenho = 0");

		List<br.com.example.model.avaliacao.model.AvaliacaoDetalhe> detalhesPendentes =
				_avaliacaoDetalheLocalService.findByTipoAvaliadorAndDesempenho(tipoAvaliador, 0);

		_log.info("üìä RESULTADO DA BUSCA:");
		if (detalhesPendentes == null) {
			_log.warn("‚ö†Ô∏è  Lista de detalhes retornou NULL!");
			return Page.of(new ArrayList<>());
		}

		_log.info("   ‚úÖ TOTAL DE DETALHES PENDENTES: " + detalhesPendentes.size());

		if (detalhesPendentes.isEmpty()) {
			_log.warn("‚ö†Ô∏è  NENHUM DETALHE PENDENTE ENCONTRADO para tipoAvaliador = " + tipoAvaliador);
			_log.warn("   Isso significa que n√£o existem avalia√ß√µes aguardando preenchimento deste tipo de avaliador.");
			return Page.of(new ArrayList<>());
		}

		// ==========================================
		// 4. LOG DOS DETALHES ENCONTRADOS
		// ==========================================
		_log.info("üìù DETALHES PENDENTES ENCONTRADOS:");
		for (br.com.example.model.avaliacao.model.AvaliacaoDetalhe detalhe : detalhesPendentes) {
			_log.info("   - Detalhe ID: " + detalhe.getAvaliacaoDetalheId() +
					" | Avalia√ß√£o ID: " + detalhe.getAvaliacaoId() +
					" | Tipo: " + detalhe.getTipoAvaliador() +
					" | Desempenho: " + detalhe.getDesempenho());
		}

		// ==========================================
		// 5. MONTAR AVALIA√á√ïES COMPLETAS
		// ==========================================
		List<AvaliacaoCompleta> avaliacoesCompletas = new ArrayList<>();
		Set<Long> avaliacoesJaProcessadas = new HashSet<>();

		_log.info("üîÑ MONTANDO AVALIA√á√ïES COMPLETAS...");

		for (br.com.example.model.avaliacao.model.AvaliacaoDetalhe detalhe : detalhesPendentes) {
			try {
				// Evita processar a mesma avalia√ß√£o v√°rias vezes
				if (avaliacoesJaProcessadas.contains(detalhe.getAvaliacaoId())) {
					_log.info("   ‚è≠Ô∏è  Avalia√ß√£o " + detalhe.getAvaliacaoId() + " j√° processada. Pulando...");
					continue;
				}

				// Buscar avalia√ß√£o principal
				_log.info("   üì• Buscando Avalia√ß√£o ID: " + detalhe.getAvaliacaoId());
				br.com.example.model.avaliacao.model.Avaliacao avaliacaoEntity =
						_avaliacaoLocalService.getAvaliacao(detalhe.getAvaliacaoId());

				// Buscar TODOS os detalhes desta avalia√ß√£o
				List<br.com.example.model.avaliacao.model.AvaliacaoDetalhe> todosDetalhes =
						_avaliacaoDetalheLocalService.findByAvaliacaoId(detalhe.getAvaliacaoId());

				_log.info("   ‚úÖ Avalia√ß√£o encontrada! Funcion√°rio: " + avaliacaoEntity.getUserName());
				_log.info("   ‚úÖ Total de detalhes: " + (todosDetalhes != null ? todosDetalhes.size() : 0));

				// Converter para DTO composto
				AvaliacaoCompleta avaliacaoCompleta =
						ConverterDto.toAvaliacaoCompleta(avaliacaoEntity, todosDetalhes);

				avaliacoesCompletas.add(avaliacaoCompleta);
				avaliacoesJaProcessadas.add(detalhe.getAvaliacaoId());

			} catch (Exception e) {
				_log.error("‚ùå ERRO ao processar Avalia√ß√£o ID " + detalhe.getAvaliacaoId() + ": " + e.getMessage(), e);
				// Continua para pr√≥xima
			}
		}

		// ==========================================
		// 6. RETORNAR RESULTADO
		// ==========================================
		_log.info("üì§ RESULTADO FINAL:");
		_log.info("   ‚úÖ TOTAL DE AVALIA√á√ïES PENDENTES: " + avaliacoesCompletas.size());
		_log.info("========== FIM: getAvaliacoesPendentesParaMim ==========\n");

		return Page.of(avaliacoesCompletas);
	}




	/**
	 * Busca avalia√ß√µes com filtros opcionais.
	 *
	 * Endpoint: GET /o/desafio-avaliacao/v1.0/avaliacoes/search
	 */
	@Override
	public Page<Avaliacao> searchAvaliacoes(
			String nome,
			String email,
			String data,
			Integer area,
			Integer periodo,
			Pagination pagination
	) throws Exception {

		long companyId = PortalUtil.getCompanyId(contextHttpServletRequest);

		// Valida√ß√µes
		if (!_searchHelper.isValidDateFormat(data)) {
			throw new IllegalArgumentException("Formato de data inv√°lido. Use: yyyy-MM-dd");
		}

		if (!_searchHelper.isValidArea(area)) {
			throw new IllegalArgumentException("√Årea inv√°lida. Valores permitidos: 1-5");
		}

		if (!_searchHelper.isValidPeriodo(periodo)) {
			throw new IllegalArgumentException("Per√≠odo inv√°lido. Valores permitidos: 1-3");
		}

		// Normalizar email
		email = _searchHelper.normalizeEmail(email);

		// Executar busca
		AvaliacaoSearchService.SearchResult searchResult = _searchService.searchAvaliacoes(
				nome,
				email,
				data,
				area,
				periodo,
				companyId,
				pagination.getStartPosition(),
				pagination.getEndPosition()
		);

		// Converter entidades para DTOs
		List<br.com.example.model.avaliacao.model.Avaliacao> entities = searchResult.getItems();
		List<Avaliacao> dtos = ConverterDto.entityListToDtoList(entities);

		// Retornar p√°gina com DTOs
		return Page.of(dtos, pagination, searchResult.getTotalCount());
	}



	/**
	 * Cria uma nova avalia√ß√£o de desafio para um funcion√°rio.
	 *
	 * @param avaliacao DTO contendo dados da nova avalia√ß√£o
	 * @return DTO da avalia√ß√£o criada com ID gerado
	 * @throws PortalException se os dados forem inv√°lidos
	 */
	@Override
	public Avaliacao createAvaliacao(Avaliacao avaliacao) throws PortalException {

		// Chama LocalService para persistir nova avalia√ß√£o
		br.com.example.model.avaliacao.model.Avaliacao entity =
				_avaliacaoLocalService.addAvaliacao(
						avaliacao.getFuncionarioId(),        // ID do funcion√°rio
						avaliacao.getDataAvaliacao(),        // Date direto do DTO
						avaliacao.getPeriodoDesafio(),       // Per√≠odo (30/60/90 dias)
						avaliacao.getObservacoesGerais(),    // Observa√ß√µes gerais
						avaliacao.getAreaAtuacao(),          // √Årea de atua√ß√£o
						createServiceContext()               // Contexto da requisi√ß√£o
				);

		return ConverterDto.entityToDto(entity);  // Converte entity salva para DTO
	}

	/**
	 * Cria uma avalia√ß√£o completa (avalia√ß√£o + todos os detalhes) em uma √∫nica requisi√ß√£o.
	 * Endpoint: POST /o/desafio-avaliacao/v1.0/avaliacoes/completa
	 *
	 * @param avaliacaoCompleta DTO com avalia√ß√£o + array de detalhes (TechLead, Gerente, RH)
	 * @return AvaliacaoCompleta DTO com IDs gerados
	 * @throws PortalException se dados inv√°lidos ou erro ao salvar
	 */
	@Override
	public AvaliacaoCompleta createAvaliacaoCompleta(AvaliacaoCompleta avaliacaoCompleta)
			throws PortalException {

		ServiceContext serviceContext = createServiceContext();

		// 1. Cria a AVALIA√á√ÉO principal
		br.com.example.model.avaliacao.model.Avaliacao avaliacaoEntity =
				_avaliacaoLocalService.addAvaliacao(
						avaliacaoCompleta.getFuncionarioId(),
						avaliacaoCompleta.getDataAvaliacao(),
						avaliacaoCompleta.getPeriodoDesafio(),
						avaliacaoCompleta.getObservacoesGerais(),
						avaliacaoCompleta.getAreaAtuacao(),
						serviceContext
				);
		// aplicar no futuro
//		// 2. Cria 3 detalhes VAZIOS obrigat√≥rios
//		List<br.com.example.model.avaliacao.model.AvaliacaoDetalhe> detalhesEntities =
//				new ArrayList<>();
//		// Detalhe vazio para Tech Lead (tipo 1)
//		br.com.example.model.avaliacao.model.AvaliacaoDetalhe detalheTechLead =
//				_avaliacaoDetalheLocalService.addAvaliacaoDetalhe(
//						avaliacaoEntity,
//						1,      // TechLead
//						null,   // Nome vazio
//						null,   // Observa√ß√µes vazias
//						0,      // Desempenho vazio
//						serviceContext
//				);
//		detalhesEntities.add(detalheTechLead);
//
//		// Detalhe vazio para Gerente (tipo 2)
//		br.com.example.model.avaliacao.model.AvaliacaoDetalhe detalheGerente =
//				_avaliacaoDetalheLocalService.addAvaliacaoDetalhe(
//						avaliacaoEntity,
//						2,      // Gerente
//						null,   // Nome vazio
//						null,   // Observa√ß√µes vazias
//						0,      // Desempenho vazio
//						serviceContext
//				);
//		detalhesEntities.add(detalheGerente);
//
//		// Detalhe vazio para RH (tipo 3)
//		br.com.example.model.avaliacao.model.AvaliacaoDetalhe detalheRH =
//				_avaliacaoDetalheLocalService.addAvaliacaoDetalhe(
//						avaliacaoEntity,
//						3,      // RH
//						null,   // Nome vazio
//						null,   // Observa√ß√µes vazias
//						0,      // Desempenho vazio
//						serviceContext
//				);
//		detalhesEntities.add(detalheRH);

		// 2. Busca detalhes existentes (se houver)
		List<br.com.example.model.avaliacao.model.AvaliacaoDetalhe> detalhesEntities =
				_avaliacaoDetalheLocalService.findByAvaliacaoId(avaliacaoEntity.getAvaliacaoId());

		// Se n√£o houver detalhes, retorna lista vazia
		if (detalhesEntities == null) {
			detalhesEntities = new ArrayList<>();
		}

		// 3. Converte tudo de volta para DTO composto
		return ConverterDto.toAvaliacaoCompleta(avaliacaoEntity, detalhesEntities);
	}


	/**
	 * Atualiza uma avalia√ß√£o existente.
	 * N√£o permite alterar o funcion√°rio ap√≥s cria√ß√£o.
	 *
	 * @param avaliacaoId ID da avalia√ß√£o a ser atualizada
	 * @param avaliacao DTO contendo novos dados da avalia√ß√£o
	 * @return DTO da avalia√ß√£o atualizada
	 * @throws PortalException se a avalia√ß√£o n√£o existir ou dados forem inv√°lidos
	 */
	@Override
	public Avaliacao updateAvaliacao(Long avaliacaoId, Avaliacao avaliacao)
			throws PortalException {

		// Chama LocalService para atualizar avalia√ß√£o existente
		br.com.example.model.avaliacao.model.Avaliacao entity =
				_avaliacaoLocalService.updateAvaliacao(
						avaliacaoId,                         // ID da avalia√ß√£o a atualizar
						avaliacao.getDataAvaliacao(),        // Nova data
						avaliacao.getPeriodoDesafio(),       // Novo per√≠odo
						avaliacao.getObservacoesGerais(),    // Novas observa√ß√µes
						avaliacao.getAreaAtuacao(),          // Nova √°rea
						createServiceContext()               // Contexto da requisi√ß√£o
				);

		return convertEntityToDTO(entity);  // Retorna DTO atualizado
	}

	/**
	 * Remove uma avalia√ß√£o e todos os seus detalhes relacionados (cascade delete).
	 *
	 * @param avaliacaoId ID da avalia√ß√£o a ser removida
	 * @return Response HTTP 204 (No Content)
	 * @throws PortalException se a avalia√ß√£o n√£o for encontrada
	 */
	@Override
	public Response deleteAvaliacao(Long avaliacaoId) throws PortalException {

		// LocalService faz dele√ß√£o em cascata (avaliacao + detalhes)
		_avaliacaoLocalService.deleteAvaliacao(avaliacaoId);

		return Response.noContent().build();  // HTTP 204 No Content
	}

	/**
	 * Converte entidade de dom√≠nio para DTO REST.
	 *
	 * @param entity entidade de dom√≠nio Avaliacao do banco
	 * @return DTO Avaliacao pronto para serializa√ß√£o JSON/XML
	 */
	private Avaliacao convertEntityToDTO(
			br.com.example.model.avaliacao.model.Avaliacao entity) {

		Avaliacao dto = new Avaliacao();  // Cria novo DTO

		dto.setAvaliacaoId(entity.getAvaliacaoId());        // Mapeia ID
		dto.setFuncionarioId(entity.getFuncionarioId());    // Mapeia funcion√°rio
		dto.setDataAvaliacao(entity.getDataAvaliacao());    // Date direto, sem convers√£o
		dto.setPeriodoDesafio(entity.getPeriodoDesafio());  // Mapeia per√≠odo
		dto.setObservacoesGerais(entity.getObservacoesGerais()); // Mapeia observa√ß√µes
		dto.setAreaAtuacao(entity.getAreaAtuacao());        // Mapeia √°rea

		return dto;  // Retorna DTO preenchido
	}

	/**
	 * Cria ServiceContext a partir do contexto HTTP da requisi√ß√£o REST.
	 *
	 * @return ServiceContext configurado para a requisi√ß√£o atual
	 * @throws PortalException se n√£o conseguir obter informa√ß√µes do contexto
	 */
	private ServiceContext createServiceContext() throws PortalException {
		ServiceContext serviceContext = new ServiceContext();  // Cria contexto

		if (contextHttpServletRequest != null) {  // Se h√° requisi√ß√£o HTTP
			// Extrai companyId da requisi√ß√£o
			serviceContext.setCompanyId(
					PortalUtil.getCompanyId(contextHttpServletRequest)
			);

			// Extrai groupId (escopo) da requisi√ß√£o
			serviceContext.setScopeGroupId(
					PortalUtil.getScopeGroupId(contextHttpServletRequest)
			);

			try {
				// Tenta extrair userId do usu√°rio autenticado
				serviceContext.setUserId(
						PortalUtil.getUserId(contextHttpServletRequest)
				);
			} catch (Exception e) {
				serviceContext.setUserId(0L);  // Usu√°rio guest se n√£o autenticado
			}
		}

		return serviceContext;  // Retorna contexto configurado
	}


	/**
	 * Obt√©m o tipo de avaliador do usu√°rio baseado nos seus pap√©is (roles).
	 * @param user usu√°rio logado
	 * @return TIPO_TECH_LEAD, TIPO_GERENTE, TIPO_RH ou TIPO_DESCONHECIDO
	 */
	private int obterTipoAvaliadorDoUsuario(User user) {
		try {
			List<Role> roles = user.getRoles();

			// ========== ADICIONAR ESTES LOGS ==========
			_log.info("========== DEBUG DE ROLES ==========");
			_log.info("Total de roles do usu√°rio: " + roles.size());

			for (Role role : roles) {
				String roleName = role.getName();
				_log.info("   ‚Üí Role encontrada: [" + roleName + "]");
				_log.info("   ‚Üí Length: " + roleName.length());
				_log.info("   ‚Üí Bytes: " + java.util.Arrays.toString(roleName.getBytes()));
			}

			_log.info("========== COMPARA√á√ïES ==========");
			_log.info("ROLE_RH esperado: [" + PermissionConstants.ROLE_RH + "]");
			_log.info("ROLE_TECH_LEAD esperado: [" + PermissionConstants.ROLE_TECH_LEAD + "]");
			_log.info("ROLE_GERENTE esperado: [" + PermissionConstants.ROLE_GERENTE + "]");
			// ==========================================

			for (Role role : roles) {
				String roleName = role.getName();

				if (roleName.equals(PermissionConstants.ROLE_TECH_LEAD)) {
					return PermissionConstants.TIPO_TECH_LEAD;
				}

				if (roleName.equals(PermissionConstants.ROLE_GERENTE)) {
					return PermissionConstants.TIPO_GERENTE;
				}

				if (roleName.equals(PermissionConstants.ROLE_RH)) {
					return PermissionConstants.TIPO_RH;
				}
			}

			return PermissionConstants.TIPO_DESCONHECIDO;

		} catch (Exception e) {
			_log.error("Erro ao obter tipo de avaliador do usu√°rio", e);
			return PermissionConstants.TIPO_DESCONHECIDO;
		}
	}


	/**
	 * Obt√©m o usu√°rio logado da requisi√ß√£o atual.
	 *
	 * @return User logado
	 * @throws PortalException se n√£o conseguir obter usu√°rio
	 */
	private User getLoginUser() throws PortalException {
		try {
			long userId = PortalUtil.getUserId(contextHttpServletRequest);
			return _userLocalService.getUser(userId);
		} catch (Exception e) {
			throw new PortalException("N√£o foi poss√≠vel obter usu√°rio logado", e);
		}
	}

	private static final Log _log = LogFactoryUtil.getLog(AvaliacaoResourceImpl.class);

	@Reference
	private AvaliacaoLocalService _avaliacaoLocalService;

	@Reference
	private AvaliacaoDetalheLocalService _avaliacaoDetalheLocalService;

	@Reference
	private AvaliacaoSearchService _searchService;

	@Reference
	private AvaliacaoSearchHelper _searchHelper;

	@Reference
	private AvaliacaoPermissionChecker _avaliacaoPermissionChecker;

	@Reference
	private UserLocalService _userLocalService;

	@Reference
	private com.liferay.portal.kernel.service.RoleLocalService roleLocalService;



}
