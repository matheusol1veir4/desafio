/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.example.model.avaliacao.model.impl;

import br.com.example.model.avaliacao.model.AvaliacaoDetalhe;
import br.com.example.model.avaliacao.model.AvaliacaoDetalheModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AvaliacaoDetalhe service. Represents a row in the &quot;DESAFIO_AvaliacaoDetalhe&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AvaliacaoDetalheModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AvaliacaoDetalheImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AvaliacaoDetalheImpl
 * @generated
 */
public class AvaliacaoDetalheModelImpl
	extends BaseModelImpl<AvaliacaoDetalhe> implements AvaliacaoDetalheModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a avaliacao detalhe model instance should use the <code>AvaliacaoDetalhe</code> interface instead.
	 */
	public static final String TABLE_NAME = "DESAFIO_AvaliacaoDetalhe";

	public static final Object[][] TABLE_COLUMNS = {
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"avaliacaoDetalheId", Types.BIGINT},
		{"avaliacaoId", Types.BIGINT}, {"tipoAvaliador", Types.VARCHAR},
		{"nomeAvaliador", Types.VARCHAR},
		{"observacoesAvaliador", Types.VARCHAR}, {"desempenho", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("avaliacaoDetalheId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("avaliacaoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tipoAvaliador", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeAvaliador", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("observacoesAvaliador", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("desempenho", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DESAFIO_AvaliacaoDetalhe (companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,avaliacaoDetalheId LONG not null primary key,avaliacaoId LONG,tipoAvaliador VARCHAR(75) null,nomeAvaliador VARCHAR(75) null,observacoesAvaliador VARCHAR(75) null,desempenho INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table DESAFIO_AvaliacaoDetalhe";

	public static final String ORDER_BY_JPQL =
		" ORDER BY avaliacaoDetalhe.avaliacaoDetalheId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DESAFIO_AvaliacaoDetalhe.avaliacaoDetalheId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AVALIACAOID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TIPOAVALIADOR_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AVALIACAODETALHEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AvaliacaoDetalheModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _avaliacaoDetalheId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAvaliacaoDetalheId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _avaliacaoDetalheId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AvaliacaoDetalhe.class;
	}

	@Override
	public String getModelClassName() {
		return AvaliacaoDetalhe.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AvaliacaoDetalhe, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AvaliacaoDetalhe, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AvaliacaoDetalhe, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AvaliacaoDetalhe)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AvaliacaoDetalhe, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AvaliacaoDetalhe, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AvaliacaoDetalhe)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AvaliacaoDetalhe, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AvaliacaoDetalhe, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AvaliacaoDetalhe, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AvaliacaoDetalhe, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AvaliacaoDetalhe, Object>>();

			attributeGetterFunctions.put(
				"companyId", AvaliacaoDetalhe::getCompanyId);
			attributeGetterFunctions.put(
				"groupId", AvaliacaoDetalhe::getGroupId);
			attributeGetterFunctions.put("userId", AvaliacaoDetalhe::getUserId);
			attributeGetterFunctions.put(
				"createDate", AvaliacaoDetalhe::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AvaliacaoDetalhe::getModifiedDate);
			attributeGetterFunctions.put(
				"avaliacaoDetalheId", AvaliacaoDetalhe::getAvaliacaoDetalheId);
			attributeGetterFunctions.put(
				"avaliacaoId", AvaliacaoDetalhe::getAvaliacaoId);
			attributeGetterFunctions.put(
				"tipoAvaliador", AvaliacaoDetalhe::getTipoAvaliador);
			attributeGetterFunctions.put(
				"nomeAvaliador", AvaliacaoDetalhe::getNomeAvaliador);
			attributeGetterFunctions.put(
				"observacoesAvaliador",
				AvaliacaoDetalhe::getObservacoesAvaliador);
			attributeGetterFunctions.put(
				"desempenho", AvaliacaoDetalhe::getDesempenho);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AvaliacaoDetalhe, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AvaliacaoDetalhe, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AvaliacaoDetalhe, ?>>();

			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AvaliacaoDetalhe, Long>)
					AvaliacaoDetalhe::setCompanyId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AvaliacaoDetalhe, Long>)
					AvaliacaoDetalhe::setGroupId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AvaliacaoDetalhe, Long>)
					AvaliacaoDetalhe::setUserId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AvaliacaoDetalhe, Date>)
					AvaliacaoDetalhe::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AvaliacaoDetalhe, Date>)
					AvaliacaoDetalhe::setModifiedDate);
			attributeSetterBiConsumers.put(
				"avaliacaoDetalheId",
				(BiConsumer<AvaliacaoDetalhe, Long>)
					AvaliacaoDetalhe::setAvaliacaoDetalheId);
			attributeSetterBiConsumers.put(
				"avaliacaoId",
				(BiConsumer<AvaliacaoDetalhe, Long>)
					AvaliacaoDetalhe::setAvaliacaoId);
			attributeSetterBiConsumers.put(
				"tipoAvaliador",
				(BiConsumer<AvaliacaoDetalhe, String>)
					AvaliacaoDetalhe::setTipoAvaliador);
			attributeSetterBiConsumers.put(
				"nomeAvaliador",
				(BiConsumer<AvaliacaoDetalhe, String>)
					AvaliacaoDetalhe::setNomeAvaliador);
			attributeSetterBiConsumers.put(
				"observacoesAvaliador",
				(BiConsumer<AvaliacaoDetalhe, String>)
					AvaliacaoDetalhe::setObservacoesAvaliador);
			attributeSetterBiConsumers.put(
				"desempenho",
				(BiConsumer<AvaliacaoDetalhe, Integer>)
					AvaliacaoDetalhe::setDesempenho);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getAvaliacaoDetalheId() {
		return _avaliacaoDetalheId;
	}

	@Override
	public void setAvaliacaoDetalheId(long avaliacaoDetalheId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_avaliacaoDetalheId = avaliacaoDetalheId;
	}

	@Override
	public long getAvaliacaoId() {
		return _avaliacaoId;
	}

	@Override
	public void setAvaliacaoId(long avaliacaoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_avaliacaoId = avaliacaoId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAvaliacaoId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("avaliacaoId"));
	}

	@Override
	public String getTipoAvaliador() {
		if (_tipoAvaliador == null) {
			return "";
		}
		else {
			return _tipoAvaliador;
		}
	}

	@Override
	public void setTipoAvaliador(String tipoAvaliador) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tipoAvaliador = tipoAvaliador;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTipoAvaliador() {
		return getColumnOriginalValue("tipoAvaliador");
	}

	@Override
	public String getNomeAvaliador() {
		if (_nomeAvaliador == null) {
			return "";
		}
		else {
			return _nomeAvaliador;
		}
	}

	@Override
	public void setNomeAvaliador(String nomeAvaliador) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nomeAvaliador = nomeAvaliador;
	}

	@Override
	public String getObservacoesAvaliador() {
		if (_observacoesAvaliador == null) {
			return "";
		}
		else {
			return _observacoesAvaliador;
		}
	}

	@Override
	public void setObservacoesAvaliador(String observacoesAvaliador) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_observacoesAvaliador = observacoesAvaliador;
	}

	@Override
	public int getDesempenho() {
		return _desempenho;
	}

	@Override
	public void setDesempenho(int desempenho) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_desempenho = desempenho;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AvaliacaoDetalhe.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AvaliacaoDetalhe toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AvaliacaoDetalhe>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AvaliacaoDetalheImpl avaliacaoDetalheImpl = new AvaliacaoDetalheImpl();

		avaliacaoDetalheImpl.setCompanyId(getCompanyId());
		avaliacaoDetalheImpl.setGroupId(getGroupId());
		avaliacaoDetalheImpl.setUserId(getUserId());
		avaliacaoDetalheImpl.setCreateDate(getCreateDate());
		avaliacaoDetalheImpl.setModifiedDate(getModifiedDate());
		avaliacaoDetalheImpl.setAvaliacaoDetalheId(getAvaliacaoDetalheId());
		avaliacaoDetalheImpl.setAvaliacaoId(getAvaliacaoId());
		avaliacaoDetalheImpl.setTipoAvaliador(getTipoAvaliador());
		avaliacaoDetalheImpl.setNomeAvaliador(getNomeAvaliador());
		avaliacaoDetalheImpl.setObservacoesAvaliador(getObservacoesAvaliador());
		avaliacaoDetalheImpl.setDesempenho(getDesempenho());

		avaliacaoDetalheImpl.resetOriginalValues();

		return avaliacaoDetalheImpl;
	}

	@Override
	public AvaliacaoDetalhe cloneWithOriginalValues() {
		AvaliacaoDetalheImpl avaliacaoDetalheImpl = new AvaliacaoDetalheImpl();

		avaliacaoDetalheImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		avaliacaoDetalheImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		avaliacaoDetalheImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		avaliacaoDetalheImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		avaliacaoDetalheImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		avaliacaoDetalheImpl.setAvaliacaoDetalheId(
			this.<Long>getColumnOriginalValue("avaliacaoDetalheId"));
		avaliacaoDetalheImpl.setAvaliacaoId(
			this.<Long>getColumnOriginalValue("avaliacaoId"));
		avaliacaoDetalheImpl.setTipoAvaliador(
			this.<String>getColumnOriginalValue("tipoAvaliador"));
		avaliacaoDetalheImpl.setNomeAvaliador(
			this.<String>getColumnOriginalValue("nomeAvaliador"));
		avaliacaoDetalheImpl.setObservacoesAvaliador(
			this.<String>getColumnOriginalValue("observacoesAvaliador"));
		avaliacaoDetalheImpl.setDesempenho(
			this.<Integer>getColumnOriginalValue("desempenho"));

		return avaliacaoDetalheImpl;
	}

	@Override
	public int compareTo(AvaliacaoDetalhe avaliacaoDetalhe) {
		long primaryKey = avaliacaoDetalhe.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AvaliacaoDetalhe)) {
			return false;
		}

		AvaliacaoDetalhe avaliacaoDetalhe = (AvaliacaoDetalhe)object;

		long primaryKey = avaliacaoDetalhe.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AvaliacaoDetalhe> toCacheModel() {
		AvaliacaoDetalheCacheModel avaliacaoDetalheCacheModel =
			new AvaliacaoDetalheCacheModel();

		avaliacaoDetalheCacheModel.companyId = getCompanyId();

		avaliacaoDetalheCacheModel.groupId = getGroupId();

		avaliacaoDetalheCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			avaliacaoDetalheCacheModel.createDate = createDate.getTime();
		}
		else {
			avaliacaoDetalheCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			avaliacaoDetalheCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			avaliacaoDetalheCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		avaliacaoDetalheCacheModel.avaliacaoDetalheId = getAvaliacaoDetalheId();

		avaliacaoDetalheCacheModel.avaliacaoId = getAvaliacaoId();

		avaliacaoDetalheCacheModel.tipoAvaliador = getTipoAvaliador();

		String tipoAvaliador = avaliacaoDetalheCacheModel.tipoAvaliador;

		if ((tipoAvaliador != null) && (tipoAvaliador.length() == 0)) {
			avaliacaoDetalheCacheModel.tipoAvaliador = null;
		}

		avaliacaoDetalheCacheModel.nomeAvaliador = getNomeAvaliador();

		String nomeAvaliador = avaliacaoDetalheCacheModel.nomeAvaliador;

		if ((nomeAvaliador != null) && (nomeAvaliador.length() == 0)) {
			avaliacaoDetalheCacheModel.nomeAvaliador = null;
		}

		avaliacaoDetalheCacheModel.observacoesAvaliador =
			getObservacoesAvaliador();

		String observacoesAvaliador =
			avaliacaoDetalheCacheModel.observacoesAvaliador;

		if ((observacoesAvaliador != null) &&
			(observacoesAvaliador.length() == 0)) {

			avaliacaoDetalheCacheModel.observacoesAvaliador = null;
		}

		avaliacaoDetalheCacheModel.desempenho = getDesempenho();

		return avaliacaoDetalheCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AvaliacaoDetalhe, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AvaliacaoDetalhe, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AvaliacaoDetalhe, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AvaliacaoDetalhe)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AvaliacaoDetalhe>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AvaliacaoDetalhe.class, ModelWrapper.class);

	}

	private long _companyId;
	private long _groupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _avaliacaoDetalheId;
	private long _avaliacaoId;
	private String _tipoAvaliador;
	private String _nomeAvaliador;
	private String _observacoesAvaliador;
	private int _desempenho;

	public <T> T getColumnValue(String columnName) {
		Function<AvaliacaoDetalhe, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AvaliacaoDetalhe)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("avaliacaoDetalheId", _avaliacaoDetalheId);
		_columnOriginalValues.put("avaliacaoId", _avaliacaoId);
		_columnOriginalValues.put("tipoAvaliador", _tipoAvaliador);
		_columnOriginalValues.put("nomeAvaliador", _nomeAvaliador);
		_columnOriginalValues.put(
			"observacoesAvaliador", _observacoesAvaliador);
		_columnOriginalValues.put("desempenho", _desempenho);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("companyId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("createDate", 8L);

		columnBitmasks.put("modifiedDate", 16L);

		columnBitmasks.put("avaliacaoDetalheId", 32L);

		columnBitmasks.put("avaliacaoId", 64L);

		columnBitmasks.put("tipoAvaliador", 128L);

		columnBitmasks.put("nomeAvaliador", 256L);

		columnBitmasks.put("observacoesAvaliador", 512L);

		columnBitmasks.put("desempenho", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AvaliacaoDetalhe _escapedModel;

}