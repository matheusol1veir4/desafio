/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.example.model.avaliacao.model.impl;

import br.com.example.model.avaliacao.model.Funcionario;
import br.com.example.model.avaliacao.model.FuncionarioModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Funcionario service. Represents a row in the &quot;FOO_Funcionario&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FuncionarioModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FuncionarioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FuncionarioImpl
 * @generated
 */
public class FuncionarioModelImpl
	extends BaseModelImpl<Funcionario> implements FuncionarioModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a funcionario model instance should use the <code>Funcionario</code> interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Funcionario";

	public static final Object[][] TABLE_COLUMNS = {
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"funcionarioId", Types.BIGINT},
		{"nome", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"areaAtuacao", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("funcionarioId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areaAtuacao", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FOO_Funcionario (companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,funcionarioId LONG not null primary key,nome VARCHAR(75) null,email VARCHAR(75) null,areaAtuacao INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table FOO_Funcionario";

	public static final String ORDER_BY_JPQL =
		" ORDER BY funcionario.funcionarioId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FOO_Funcionario.funcionarioId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AREAATUACAO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAIL_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FUNCIONARIOID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FuncionarioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _funcionarioId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFuncionarioId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _funcionarioId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Funcionario.class;
	}

	@Override
	public String getModelClassName() {
		return Funcionario.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Funcionario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Funcionario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Funcionario, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Funcionario)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Funcionario, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Funcionario, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Funcionario)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Funcionario, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Funcionario, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Funcionario, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Funcionario, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Funcionario, Object>>();

			attributeGetterFunctions.put(
				"companyId", Funcionario::getCompanyId);
			attributeGetterFunctions.put("groupId", Funcionario::getGroupId);
			attributeGetterFunctions.put("userId", Funcionario::getUserId);
			attributeGetterFunctions.put(
				"createDate", Funcionario::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Funcionario::getModifiedDate);
			attributeGetterFunctions.put(
				"funcionarioId", Funcionario::getFuncionarioId);
			attributeGetterFunctions.put("nome", Funcionario::getNome);
			attributeGetterFunctions.put("email", Funcionario::getEmail);
			attributeGetterFunctions.put(
				"areaAtuacao", Funcionario::getAreaAtuacao);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Funcionario, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Funcionario, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Funcionario, ?>>();

			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Funcionario, Long>)Funcionario::setCompanyId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<Funcionario, Long>)Funcionario::setGroupId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<Funcionario, Long>)Funcionario::setUserId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Funcionario, Date>)Funcionario::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Funcionario, Date>)Funcionario::setModifiedDate);
			attributeSetterBiConsumers.put(
				"funcionarioId",
				(BiConsumer<Funcionario, Long>)Funcionario::setFuncionarioId);
			attributeSetterBiConsumers.put(
				"nome", (BiConsumer<Funcionario, String>)Funcionario::setNome);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<Funcionario, String>)Funcionario::setEmail);
			attributeSetterBiConsumers.put(
				"areaAtuacao",
				(BiConsumer<Funcionario, Integer>)Funcionario::setAreaAtuacao);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getFuncionarioId() {
		return _funcionarioId;
	}

	@Override
	public void setFuncionarioId(long funcionarioId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_funcionarioId = funcionarioId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFuncionarioId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("funcionarioId"));
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nome = nome;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmail() {
		return getColumnOriginalValue("email");
	}

	@Override
	public int getAreaAtuacao() {
		return _areaAtuacao;
	}

	@Override
	public void setAreaAtuacao(int areaAtuacao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_areaAtuacao = areaAtuacao;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalAreaAtuacao() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("areaAtuacao"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Funcionario.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Funcionario toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Funcionario>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FuncionarioImpl funcionarioImpl = new FuncionarioImpl();

		funcionarioImpl.setCompanyId(getCompanyId());
		funcionarioImpl.setGroupId(getGroupId());
		funcionarioImpl.setUserId(getUserId());
		funcionarioImpl.setCreateDate(getCreateDate());
		funcionarioImpl.setModifiedDate(getModifiedDate());
		funcionarioImpl.setFuncionarioId(getFuncionarioId());
		funcionarioImpl.setNome(getNome());
		funcionarioImpl.setEmail(getEmail());
		funcionarioImpl.setAreaAtuacao(getAreaAtuacao());

		funcionarioImpl.resetOriginalValues();

		return funcionarioImpl;
	}

	@Override
	public Funcionario cloneWithOriginalValues() {
		FuncionarioImpl funcionarioImpl = new FuncionarioImpl();

		funcionarioImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		funcionarioImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		funcionarioImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		funcionarioImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		funcionarioImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		funcionarioImpl.setFuncionarioId(
			this.<Long>getColumnOriginalValue("funcionarioId"));
		funcionarioImpl.setNome(this.<String>getColumnOriginalValue("nome"));
		funcionarioImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		funcionarioImpl.setAreaAtuacao(
			this.<Integer>getColumnOriginalValue("areaAtuacao"));

		return funcionarioImpl;
	}

	@Override
	public int compareTo(Funcionario funcionario) {
		long primaryKey = funcionario.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Funcionario)) {
			return false;
		}

		Funcionario funcionario = (Funcionario)object;

		long primaryKey = funcionario.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Funcionario> toCacheModel() {
		FuncionarioCacheModel funcionarioCacheModel =
			new FuncionarioCacheModel();

		funcionarioCacheModel.companyId = getCompanyId();

		funcionarioCacheModel.groupId = getGroupId();

		funcionarioCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			funcionarioCacheModel.createDate = createDate.getTime();
		}
		else {
			funcionarioCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			funcionarioCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			funcionarioCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		funcionarioCacheModel.funcionarioId = getFuncionarioId();

		funcionarioCacheModel.nome = getNome();

		String nome = funcionarioCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			funcionarioCacheModel.nome = null;
		}

		funcionarioCacheModel.email = getEmail();

		String email = funcionarioCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			funcionarioCacheModel.email = null;
		}

		funcionarioCacheModel.areaAtuacao = getAreaAtuacao();

		return funcionarioCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Funcionario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Funcionario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Funcionario, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Funcionario)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Funcionario>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Funcionario.class, ModelWrapper.class);

	}

	private long _companyId;
	private long _groupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _funcionarioId;
	private String _nome;
	private String _email;
	private int _areaAtuacao;

	public <T> T getColumnValue(String columnName) {
		Function<Funcionario, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Funcionario)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("funcionarioId", _funcionarioId);
		_columnOriginalValues.put("nome", _nome);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("areaAtuacao", _areaAtuacao);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("companyId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("createDate", 8L);

		columnBitmasks.put("modifiedDate", 16L);

		columnBitmasks.put("funcionarioId", 32L);

		columnBitmasks.put("nome", 64L);

		columnBitmasks.put("email", 128L);

		columnBitmasks.put("areaAtuacao", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Funcionario _escapedModel;

}