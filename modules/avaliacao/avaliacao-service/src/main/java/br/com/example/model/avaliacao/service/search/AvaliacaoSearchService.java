package br.com.example.model.avaliacao.service.search;

import br.com.example.model.avaliacao.model.Avaliacao;
import br.com.example.model.avaliacao.service.AvaliacaoLocalService;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.UserLocalService;
import com.liferay.portal.kernel.util.Validator;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Servi√ßo de busca e filtragem de avalia√ß√µes.
 * Realiza busca manual com m√∫ltiplos crit√©rios e valida√ß√£o de dados do funcion√°rio.
 */
@Component(service = AvaliacaoSearchService.class)
public class AvaliacaoSearchService {

    private static final Log _log = LogFactoryUtil.getLog(AvaliacaoSearchService.class);

    /**
     * Busca avalia√ß√µes aplicando m√∫ltiplos filtros e retorna resultado paginado.
     *
     * @param nome nome do funcion√°rio para busca parcial (case-insensitive)
     * @param email email do funcion√°rio para busca parcial (case-insensitive)
     * @param data data da avalia√ß√£o no formato yyyy-MM-dd
     * @param area c√≥digo da √°rea de atua√ß√£o (1-5)
     * @param periodo c√≥digo do per√≠odo de desafio (1-3)
     * @param companyId ID da empresa para filtro de contexto
     * @param start √≠ndice inicial para pagina√ß√£o
     * @param end √≠ndice final para pagina√ß√£o
     * @return SearchResult contendo lista paginada e total de registros
     * @throws Exception se houver erro na busca ou valida√ß√£o
     */
    public SearchResult searchAvaliacoes(
            String nome,
            String email,
            String data,  // ‚Üê CORRIGIDO: String, n√£o Date
            Integer area,
            Integer periodo,
            long companyId,
            int start,
            int end
    ) throws Exception {
        _log.info("=== IN√çCIO BUSCA AVALIA√á√ïES ===");
        _log.info("Par√¢metros recebidos:");
        _log.info(" - nome: " + nome);
        _log.info(" - email: " + email);
        _log.info(" - data: " + data);
        _log.info(" - area: " + area);
        _log.info(" - periodo: " + periodo);
        _log.info(" - companyId: " + companyId);
        _log.info(" - start: " + start + ", end: " + end);

        // Busca TODAS as avalia√ß√µes
        List<Avaliacao> todasAvaliacoes = _avaliacaoLocalService.getAvaliacaos(0, Integer.MAX_VALUE);
        _log.info("Total de avalia√ß√µes no banco: " + todasAvaliacoes.size());

        // Filtrar manualmente por companyId E crit√©rios
        List<Avaliacao> filtradas = new ArrayList<>();
        int rejeitadasCompany = 0;
        int rejeitadasCriterios = 0;

        for (Avaliacao avaliacao : todasAvaliacoes) {
            // Filtro por companyId
            if (avaliacao.getCompanyId() != companyId) {
                rejeitadasCompany++;
                continue;
            }

            boolean match = _matchesCriteria(avaliacao, nome, email, data, area, periodo);
            if (!match) {
                rejeitadasCriterios++;
                continue;
            }

            filtradas.add(avaliacao);
            _log.info("Avalia√ß√£o aceita: ID=" + avaliacao.getAvaliacaoId());
        }

        _log.info("Resultado da filtragem:");
        _log.info(" - Rejeitadas por companyId: " + rejeitadasCompany);
        _log.info(" - Rejeitadas por crit√©rios: " + rejeitadasCriterios);
        _log.info(" - Total filtradas: " + filtradas.size());

        // Pagina√ß√£o
        int total = filtradas.size();
        int fromIndex = Math.max(0, Math.min(start, total));
        int toIndex = Math.min(end, total);
        if (toIndex < fromIndex) {
            toIndex = fromIndex;
        }

        List<Avaliacao> paginadas = (fromIndex < total) ?
                filtradas.subList(fromIndex, toIndex) :
                new ArrayList<>();

        _log.info("Pagina√ß√£o: retornando " + paginadas.size() + " de " + total);
        _log.info("=== FIM BUSCA AVALIA√á√ïES ===");

        return new SearchResult(paginadas, total);
    }

    /**
     * Verifica se uma avalia√ß√£o corresponde aos crit√©rios de busca especificados.
     *
     * @param avaliacao entidade a ser verificada
     * @param nome crit√©rio de nome do funcion√°rio
     * @param email crit√©rio de email do funcion√°rio
     * @param data crit√©rio de data da avalia√ß√£o
     * @param area crit√©rio de √°rea de atua√ß√£o
     * @param periodo crit√©rio de per√≠odo de desafio
     * @return true se a avalia√ß√£o atende todos os crit√©rios n√£o nulos
     */
    private boolean _matchesCriteria(
            Avaliacao avaliacao,
            String nome,
            String email,
            String data,
            Integer area,
            Integer periodo
    ) {
        long avaliacaoId = avaliacao.getAvaliacaoId();
        _log.info(">>> Analisando avalia√ß√£o ID=" + avaliacaoId);
        _log.info(" - areaAtuacao=" + avaliacao.getAreaAtuacao());
        _log.info(" - periodoDesafio=" + avaliacao.getPeriodoDesafio());
        _log.info(" - funcionarioId=" + avaliacao.getFuncionarioId());

        // Filtro por √°rea
        if (area != null) {
            if (avaliacao.getAreaAtuacao() != area) {
                _log.info(" ‚ùå Rejeitada por √°rea. Esperado: " + area + ", Real: " + avaliacao.getAreaAtuacao());
                return false;
            }
            _log.info(" ‚úÖ Passou no filtro de √°rea");
        }

        // Filtro por per√≠odo - CORRIGIDO: Converte c√≥digo para dias
        if (periodo != null) {
            int periodoEmDias = convertCodigoParaDias(periodo);
            _log.info(" üîÑ Convertendo per√≠odo: c√≥digo " + periodo + " ‚Üí " + periodoEmDias + " dias");  // ‚Üê ADICIONE ESTA LINHA
            _log.info(" üîç Comparando: periodoDesafio do banco=" + avaliacao.getPeriodoDesafio() + " vs filtro=" + periodoEmDias);  // ‚Üê ADICIONE ESTA LINHA
            if (avaliacao.getPeriodoDesafio() != periodoEmDias) {
                _log.info(" ‚ùå Rejeitada por per√≠odo. Esperado: " + periodo + " (" + periodoEmDias + " dias), Real: " + avaliacao.getPeriodoDesafio());
                return false;
            }
            _log.info(" ‚úÖ Passou no filtro de per√≠odo");
        }

        // Filtro por data
        if (Validator.isNotNull(data)) {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date dataFiltro = sdf.parse(data);
                String dataAvaliacao = sdf.format(avaliacao.getDataAvaliacao());
                String dataFiltroStr = sdf.format(dataFiltro);
                if (!dataAvaliacao.equals(dataFiltroStr)) {
                    _log.info(" ‚ùå Rejeitada por data. Esperado: " + dataFiltroStr + ", Real: " + dataAvaliacao);
                    return false;
                }
                _log.info(" ‚úÖ Passou no filtro de data");
            } catch (ParseException e) {
                _log.warn(" Erro ao parse data: " + data, e);
                return false;
            }
        }

        // Filtro por nome ou email
        if (Validator.isNotNull(nome) || Validator.isNotNull(email)) {
            try {
                User user = _userLocalService.getUser(avaliacao.getFuncionarioId());
                _log.info(" User encontrado: " + user.getFullName() + " <" + user.getEmailAddress() + ">");

                if (Validator.isNotNull(nome)) {
                    String nomeCompleto = user.getFullName().toLowerCase();
                    String nomeBusca = nome.toLowerCase();
                    boolean match = nomeCompleto.contains(nomeBusca);
                    _log.info(" Filtro nome: '" + nomeBusca + "' contains em '" + nomeCompleto + "' = " + match);
                    if (!match) {
                        _log.info(" ‚ùå Rejeitada por nome");
                        return false;
                    }
                    _log.info(" ‚úÖ Passou no filtro de nome");
                }

                if (Validator.isNotNull(email)) {
                    String emailUser = user.getEmailAddress().toLowerCase();
                    String emailBusca = email.toLowerCase();
                    boolean match = emailUser.contains(emailBusca);
                    _log.info(" Filtro email: '" + emailBusca + "' contains em '" + emailUser + "' = " + match);
                    if (!match) {
                        _log.info(" ‚ùå Rejeitada por email");
                        return false;
                    }
                    _log.info(" ‚úÖ Passou no filtro de email");
                }

            } catch (Exception e) {
                _log.warn(" ERRO: User n√£o encontrado para funcionarioId=" + avaliacao.getFuncionarioId(), e);
                return false;
            }
        }

        _log.info(" ‚úÖ‚úÖ‚úÖ Avalia√ß√£o ACEITA!");
        return true;
    }

    /**
     * Converte c√≥digo de per√≠odo da API para dias correspondentes no banco.
     *
     * @param codigoPeriodo c√≥digo do per√≠odo (1, 2 ou 3)
     * @return dias correspondentes (30, 60 ou 90)
     */
    private int convertCodigoParaDias(int codigoPeriodo) {
        switch (codigoPeriodo) {
            case 1: return 30;  // 30 dias
            case 2: return 60;  // 60 dias
            case 3: return 90;  // 90 dias
            default:
                _log.warn("C√≥digo de per√≠odo inv√°lido: " + codigoPeriodo);
                return codigoPeriodo; // fallback
        }
    }

    /**
     * Encapsula o resultado de uma busca paginada com contagem total.
     */
    public static class SearchResult {
        private final List<Avaliacao> items;
        private final int totalCount;

        /**
         * Constr√≥i um resultado de busca.
         *
         * @param items lista de avalia√ß√µes da p√°gina atual
         * @param totalCount total de registros encontrados (sem pagina√ß√£o)
         */
        public SearchResult(List<Avaliacao> items, int totalCount) {
            this.items = items;
            this.totalCount = totalCount;
        }

        /**
         * Retorna a lista de avalia√ß√µes da p√°gina atual.
         *
         * @return lista de avalia√ß√µes
         */
        public List<Avaliacao> getItems() {
            return items;
        }

        /**
         * Retorna o total de registros encontrados.
         *
         * @return contagem total de avalia√ß√µes
         */
        public int getTotalCount() {
            return totalCount;
        }
    }

    @Reference
    private AvaliacaoLocalService _avaliacaoLocalService;

    @Reference
    private UserLocalService _userLocalService;
}
